package main

import (
	"bufio"
	b64 "encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"math"
	"os"
	"strconv"

	daemons "../daemons"
)

// Input Types Used to populate Logs

type ObjLogsInput map[int]daemons.OperationParams // int is the opnum of the object. map of all operations on the object by a single client
type ClientLogsInput map[string]ObjLogsInput      // string is object name. map of all objects that the reader operated on

var readerLogsAllInput, writerLogsAllInput map[string]ClientLogsInput // string is the client name

//Output Types Used to Hold Log Analysis
type AverageClientStat [][]int64 // Two-D Array, clients X Objects, any parameter measurable as int64
var TotalReadTime, TotalWriteTime, TotalReadPhases, TotalWritePhases, TotalEncodingTime, TotalDecodingTime, numReads, numWrites AverageClientStat

const LOGSROOT = "/tmp/ercost/"
const OUTPUTFILE = "RESULTS"
const RESULTSFOLDER = "../../../../results"

func main() {

	deployyml := flag.String("deployyml", "../../deploy_config.yml", "the path of the Deployment Config YML file")
	appyml := flag.String("appyml", "../../appl_config.yml", "the path of the Application Config YML file")
	logroot := flag.String("logroot", LOGSROOT, "the path of logs to be analysed")
	outputFile := flag.String("results", OUTPUTFILE, "the name of the output file. The file will be created under the folder"+RESULTSFOLDER)
	outputfolder := flag.String("outputfolder", RESULTSFOLDER, "the path of the output FOLDER")

	flag.Parse()

	DP := daemons.GetDeploymentParams()
	AP := daemons.GetApplicationParams()

	var readConfig interface{}

	readConfig = daemons.ReadConfigFromYML(DP, *deployyml)
	DP = readConfig.(*daemons.DeploymentParameters)

	readConfig = daemons.ReadConfigFromYML(AP, *appyml)
	AP = readConfig.(*daemons.ApplicationParams)

	numReaders := DP.Num_readers
	numWriters := DP.Num_writers
	//	numServers := DP.Num_servers
	numObjects := AP.NumObjects

	// make the slices to store the inputs
	readerLogsAllInput = make(map[string]ClientLogsInput, numReaders)
	writerLogsAllInput = make(map[string]ClientLogsInput, numWriters)

	// Make the slice to store the outputs
	TotalReadTime.MakeSlice(numReaders, numObjects)
	TotalWriteTime.MakeSlice(numWriters, numObjects)
	TotalReadPhases.MakeSlice(numReaders, numObjects)
	TotalWritePhases.MakeSlice(numWriters, numObjects)
	numReads.MakeSlice(numReaders, numObjects)
	numWrites.MakeSlice(numWriters, numObjects)
	TotalEncodingTime.MakeSlice(numWriters, numObjects)
	TotalDecodingTime.MakeSlice(numReaders, numObjects)

	// Loop over readers and populate the fields
	populateClientLogs(*logroot, "reader-", numReaders, numObjects, readerLogsAllInput)

	// Loop over writers and populate the fields
	populateClientLogs(*logroot, "writer-", numWriters, numObjects, writerLogsAllInput)

	//getReaderStats

	getReadStats("reader-", numReaders, numObjects, readerLogsAllInput, isACodingAlgorithm(AP.DefaultAlgorithm))

	getWriteStats("writer-", numWriters, numObjects, writerLogsAllInput, isACodingAlgorithm(AP.DefaultAlgorithm))

	// Compute OverAll Average of Statistics. Use this function with caution
	averageReadTime, stdReadTime, totalNumReads := computeAverageClientStat(TotalReadTime, numReads, numReaders, numObjects)
	averageReadnumPhases, _, _ := computeAverageClientStat(TotalReadPhases, numReads, numReaders, numObjects)
	averageDecodingTime, _, _ := computeAverageClientStat(TotalDecodingTime, numReads, numReaders, numObjects)
	averageWriteTime, stdWriteTime, totalNumWrites := computeAverageClientStat(TotalWriteTime, numWrites, numWriters, numObjects)
	averageWritenumPhases, _, _ := computeAverageClientStat(TotalWritePhases, numWrites, numWriters, numObjects)
	averageEncodingTime, _, _ := computeAverageClientStat(TotalEncodingTime, numWrites, numWriters, numObjects)

	// Print the results to the output file
	resultspath := *outputfolder + "/" + *outputFile
	var ff, err1 = os.OpenFile(resultspath, os.O_APPEND|os.O_CREATE|os.O_RDWR, 0666)
	defer ff.Close()

	if err1 != nil {
		panic(err1)
	}

	fmt.Fprintln(ff, "Total Number of Writes :", totalNumWrites)
	fmt.Fprintln(ff, "Average Write Time Per Operation in MS:", averageWriteTime)
	fmt.Fprintln(ff, "StdDev Write Time Per Operation in MS:", stdWriteTime)
	fmt.Fprintln(ff, "Average Write Number of Phases per Operation :", averageWritenumPhases*1e6)
	if isACodingAlgorithm(AP.DefaultAlgorithm) {
		fmt.Fprintln(ff, "Average Encoding Time Per Operation :", averageEncodingTime)
	}
	fmt.Fprintln(ff, "===================================")
	fmt.Fprintln(ff, "Total Number of Reads :", totalNumReads)
	fmt.Fprintln(ff, "Average Read Time Per Operation in MS:", averageReadTime)
	fmt.Fprintln(ff, "StdDev Read Time Per Operation in MS:", stdReadTime)
	fmt.Fprintln(ff, "Average Read Number of Phases per Operation :", averageReadnumPhases*1e6)
	if isACodingAlgorithm(AP.DefaultAlgorithm) {
		fmt.Fprintln(ff, "Average Decoding Time Per Operation :", averageDecodingTime)
	}

}

func computeAverageClientStat(TotalStat AverageClientStat, numOperations AverageClientStat, xnum int, ynum int) (float32, float32, int64) {

	var totalStat, totalSqStat, totalCount float32 = 0, 0, 0
	for i := 0; i < xnum; i++ {
		for j := 0; j < ynum; j++ {
			totalStat = totalStat + float32(TotalStat[i][j])/1e6
			totalSqStat = totalSqStat + (float32(TotalStat[i][j])/1e6)*(float32(TotalStat[i][j])/1e6)
			totalCount = totalCount + float32(numOperations[i][j])
		}
	}

	if totalCount == 0 {
		return 0, 0, 0
	}

	avgStat := totalStat / totalCount
	avgSqStat := totalSqStat / float32(totalCount)
	varStat := avgSqStat - avgStat*avgStat
	stdDev := float32(math.Sqrt(float64(varStat)))
	//    fmt.Println("stddev %f\n", avgStat, avgSqStat, varStat, stdDev)

	return avgStat, stdDev, int64(totalCount)
}

func getWriteStats(clientType string, numClients int, numObjects int, clientLogsInput map[string]ClientLogsInput, isCodingAlgo bool) {

	for i := 0; i < numClients; i++ {

		clientName := clientType + strconv.Itoa(i+1)

		for j := 0; j < numObjects; j++ {
			ObjName := "Object-" + strconv.Itoa(j+1)

			if _, OK := clientLogsInput[clientName][ObjName]; !OK {
				numWrites[i][j] = 0
				TotalWriteTime[i][j] = 0
				TotalWritePhases[i][j] = 0
				TotalEncodingTime[i][j] = 0
				continue
			}

			var totalTime, totalCodingTime, totalNumPhases int64 = 0, 0, 0

			for _, tempOp := range clientLogsInput[clientName][ObjName] {
				totalTime = totalTime + int64(tempOp.TotalTime)
				totalNumPhases = totalNumPhases + int64(tempOp.NumPhases)

				if isCodingAlgo {
					totalCodingTime = totalCodingTime + int64(tempOp.EncodingTime)
				}

			}

			numWrites[i][j] = int64(len(clientLogsInput[clientName][ObjName]))
			TotalWriteTime[i][j] = totalTime
			TotalWritePhases[i][j] = totalNumPhases
			TotalEncodingTime[i][j] = totalCodingTime

		}

	}
}

func getReadStats(clientType string, numClients int, numObjects int, clientLogsInput map[string]ClientLogsInput, isCodingAlgo bool) {

	for i := 0; i < numClients; i++ {

		clientName := clientType + strconv.Itoa(i+1)

		for j := 0; j < numObjects; j++ {
			ObjName := "Object-" + strconv.Itoa(j+1)

			if _, OK := clientLogsInput[clientName][ObjName]; !OK {
				numReads[i][j] = 0
				TotalReadTime[i][j] = 0
				TotalReadPhases[i][j] = 0
				TotalDecodingTime[i][j] = 0
				continue
			}

			var totalTime, totalCodingTime, totalNumPhases int64 = 0, 0, 0

			for _, tempOp := range clientLogsInput[clientName][ObjName] {
				totalTime = totalTime + int64(tempOp.TotalTime)
				totalNumPhases = totalNumPhases + int64(tempOp.NumPhases)

				if isCodingAlgo {
					totalCodingTime = totalCodingTime + int64(tempOp.DecodingTime)
				}

			}

			numReads[i][j] = int64(len(clientLogsInput[clientName][ObjName]))
			TotalReadTime[i][j] = totalTime
			TotalReadPhases[i][j] = totalNumPhases
			TotalDecodingTime[i][j] = totalCodingTime

		}

	}
}

func populateClientLogs(logroot string, clientType string, numClients int, numObjects int, clientLogsInput map[string]ClientLogsInput) {

	for i := 0; i < numClients; i++ {

		clientName := clientType + strconv.Itoa(i+1)

		clientLogsInput[clientName] = make(map[string]ObjLogsInput, numObjects)

		logpath := logroot + "/" + clientName + "/logs/experimentlog.txt"
		var file, err = os.OpenFile(logpath, os.O_RDONLY, 0666)

		if err != nil {
			panic(err)
		}

		scanner := bufio.NewScanner(file)

		for scanner.Scan() {
			line := scanner.Text()
			sDec, _ := b64.StdEncoding.DecodeString(line)

			opParams := daemons.OperationParams{}
			//opParams = daemons.OperationParams{}
			err := json.Unmarshal(sDec, &opParams)
			if err != nil {
				panic("Error Unmarshalling Json message")
			}
			if _, OK := clientLogsInput[clientName][opParams.ObjParamsvar.Objname]; !OK {
				clientLogsInput[clientName][opParams.ObjParamsvar.Objname] = make(map[int]daemons.OperationParams)
			}
			clientLogsInput[clientName][opParams.ObjParamsvar.Objname][opParams.Opnum] = opParams
			//	fmt.Println(opParams)

		}
		file.Close()

	}

}

func (statVar *AverageClientStat) MakeSlice(xnum int, ynum int) {
	*statVar = make(AverageClientStat, xnum)

	for i := range *statVar {
		(*statVar)[i] = make([]int64, ynum)
	}

}

func isACodingAlgorithm(algoName string) bool {
	switch algoName {
	case "SODAW", "SODAW_FAST":
		return true
	default:
		return false
	}
}
